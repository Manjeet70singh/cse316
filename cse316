#include <stdio.h>
#include <string.h>

struct process_Struct {
    char process_name[20];
    int arrival_time, burst_time, completion_time, remaining;
} temp_Struct;

void faculty_Queue(int no_of_process) {
    int count, quantum_time;
    struct process_Struct faculty_Process[no_of_process];

    for (count = 0; count < no_of_process; count++) {
        printf("Enter the details of Process[%d]\n", count + 1);
        printf("Process Name: ");
        scanf("%s", faculty_Process[count].process_name);
        printf("Arrival Time: ");
        scanf("%d", &faculty_Process[count].arrival_time);
        printf("Burst Time: ");
        scanf("%d", &faculty_Process[count].burst_time);
        printf("\n");
    }

    printf("Now, enter the quantum time for FACULTY queue: ");
    scanf("%d", &quantum_time);

    // Sort the processes by their ARRIVAL time.
    // If the ARRIVAL time is the same, scheduling is based on FCFS.
    for (int i = 0; i < no_of_process; i++) {
        for (int j = i + 1; j < no_of_process; j++) {
            if (faculty_Process[i].arrival_time > faculty_Process[j].arrival_time) {
                temp_Struct = faculty_Process[i];
                faculty_Process[i] = faculty_Process[j];
                faculty_Process[j] = temp_Struct;
            }
        }
    }

    // Initialize the remaining and completion time for each process
    for (count = 0; count < no_of_process; count++) {
        faculty_Process[count].remaining = faculty_Process[count].burst_time;
        faculty_Process[count].completion_time = 0;
    }

    int total_time = 0;
    int queue = 0;
    int round_robin[20];
    queue = 0;
    round_robin[queue] = 0;

    int flag, n, x, z, waiting_time = 0;
    do {
        flag = 0;
        for (count = 0; count < no_of_process; count++) {
            if (faculty_Process[count].remaining > 0) {
                if (faculty_Process[count].remaining < quantum_time) {
                    total_time += faculty_Process[count].remaining;
                    faculty_Process[count].remaining = 0;
                } else {
                    total_time += quantum_time;
                    faculty_Process[count].remaining -= quantum_time;
                }
                faculty_Process[count].completion_time = total_time;
            }
            if (faculty_Process[count].remaining > 0) {
                flag++;
            }
        }

    } while (flag != 0);

    // Print the output
    printf("\n\t\t\t********************************************\n");
    printf("\t\t\t*****   ROUND ROBIN ALGORITHM OUTPUT   *****\n");
    printf("\t\t\t********************************************\n");
    printf("\n|\tProcess Name\t  |\tArrival Time\t  |\tBurst Time\t |\tCompletion Time  \t|\n");

    for (count = 0; count < no_of_process; count++) {
        waiting_time = faculty_Process[count].completion_time - faculty_Process[count].burst_time - faculty_Process[count].arrival_time;

        printf("\n|\t  %s\t    |\t  %d\t   |\t  %d\t   |\t  %d\t   |\n", faculty_Process[count].process_name, faculty_Process[count].arrival_time, faculty_Process[count].burst_time, faculty_Process[count].completion_time);
    }
}

void student_Queue(int no_of_process) {
    int count, quantum_time;
    struct process_Struct student_Process[no_of_process];

    for (count = 0; count < no_of_process; count++) {
        printf("Enter the details of Process[%d]\n", count + 1);
        printf("Process Name: ");
        scanf("%s", student_Process[count].process_name);
        printf("Arrival Time: ");
        scanf("%d", &student_Process[count].arrival_time);
        printf("Burst Time: ");
        scanf("%d", &student_Process[count].burst_time);
        printf("\n");
    }

    printf("Now, enter the quantum time for STUDENT queue: ");
    scanf("%d", &quantum_time);

    // Sort the processes by their ARRIVAL time.
    // If the ARRIVAL time is the same, scheduling is based on FCFS.
    for (int i = 0; i < no_of_process; i++) {
        for (int j = i + 1; j < no_of_process; j++) {
            if (student_Process[i].arrival_time > student_Process[j].arrival_time) {
                temp_Struct = student_Process[i];
                student_Process[i] = student_Process[j];
                student_Process[j] = temp_Struct;
            }
        }
    }

    // Initialize the remaining and completion time for each process
    for (count = 0; count < no_of_process; count++) {
        student_Process[count].remaining = student_Process[count].burst_time;
        student_Process[count].completion_time = 0;
    }
}

int main(int argc, char const *argv[]) {
    int select_queue, no_of_process;

    printf("Please choose a queue to post your query:\n");
    printf("1. FACULTY queue.\n");
    printf("2. STUDENT queue.\n");
    printf("> ");
    scanf("%d", &select_queue);

    switch (select_queue) {
    case 1:
        printf("Enter number of processes for FACULTY queue: ");
        scanf("%d", &no_of_process);
        faculty_Queue(no_of_process);
        break;

    case 2:
        printf("Enter number of processes for STUDENT queue: ");
        scanf("%d", &no_of_process);
        student_Queue(no_of_process);
        break;

    default:
        printf("Please select the correct option by running the program again.\n");
    }

    return 0;
}
